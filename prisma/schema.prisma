datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  consent     Consent?
  bankAccounts BankAccount[]
}

model Consent {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  consent   String
  expiry    DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model BankAccount {
  id                     String                 @id @default(uuid())
  type                   String
  balance                Float
  currency               String
  usageType              String
  accountType            String
  nickname               String?
  userId                 String
  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountNames           AccountName[]
  accountIdentifications AccountIdentification[]
  accountBalances        AccountBalance[]
  transactions           Transaction[]
}

model Transaction {
  id                           String                 @id @default(uuid())
  date                         String
  bookingDateTime              String
  valueDateTime                String
  status                       String
  amount                       Float
  currency                     String
  reference                    String
  description                  String
  transactionInformation       String[]
  isoBankTransactionCode       Json
  proprietaryBankTransactionCode Json
  balance                      Json
  enrichment                   Json
  bankAccountId                String
  bankAccount                  BankAccount            @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
}

model AccountIdentification {
  id             String    @id @default(uuid())
  identification String
  bankAccountId  String
  bankAccount    BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
}

model AccountBalance {
  id           String    @id @default(uuid())
  balance      Float
  currency     String
  bankAccountId String
  bankAccount  BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
}

model AccountName {
  id      String    @id @default(uuid())
  name    String
  bankAccountId String
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
}
